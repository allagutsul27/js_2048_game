{"version":3,"sources":["scripts/main.js"],"names":["countOfNewCellsWhenStart","start","document","querySelector","startMessage","loseMessage","winMessage","gameFieldCells","querySelectorAll","score","fieldArray","startGame","classList","remove","add","textContent","addEventListener","contains","restart","i","addNewCell","updateCells","scoreValue","gameOver","moveLeft","row","nonZeroCells","filterRow","length","cell","updateScore","canMoveHorizontally","move","arr","moveRight","copyFieldArray","flatArray","areArraysEqual","checkIfLose","canMoveVertically","arrayRotated","rotateArray","arrayRotatedFlat","arrayBack","rotateArrayBack","j","reverse","emptyIndxs","map","rowIndex","col","colIndex","flat","filter","index","randIndex","Math","floor","random","gameCells","setValueToCell","canMergeCell","hasEmptyCell","includes","item","arr1","arr2","every","value","cells","newRows","push","e","key"],"mappings":";AAAA,aAySC,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,6IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAvSD,IAAMA,EAA2B,EAE3BC,EAAQC,SAASC,cAAc,UAE/BC,EAAeF,SAASC,cAAc,kBACtCE,EAAcH,SAASC,cAAc,iBACrCG,EAAaJ,SAASC,cAAc,gBAEpCI,EAAiBL,SAASM,iBAAiB,eAC3CC,EAAQP,SAASC,cAAc,eAE/BO,EAAa,CACjB,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAeZ,SAASC,IACPV,EAAMW,UAAUC,OAAO,SACvBZ,EAAMW,UAAUE,IAAI,WACpBb,EAAMc,YAAc,UACpBX,EAAaQ,UAAUE,IAAI,UAC3BR,EAAWM,UAAUE,IAAI,UAjB3Bb,EAAMe,iBAAiB,QAAS,WAC1Bf,EAAMW,UAAUK,SAAS,UAC3BN,IAEFO,IAEK,IAAA,IAAIC,EAAI,EAAGA,EAAInB,EAA0BmB,IAC5CC,EAAWV,GACXW,EAAYd,EAAgBG,KAYhC,IAAIY,EAAa,EACbC,GAAW,EA+Bf,SAASC,EAASC,GAGX,IAFDC,IAAAA,EAAeC,EAAUF,GAEpBN,EAAI,EAAGA,EAAIO,EAAaE,OAAQT,IAAK,CACtCU,IAAAA,EAAOH,EAAaP,GAGtBU,IAFaH,EAAaP,EAAI,KAGhCO,EAAaP,GAAY,EAAPU,EAClBP,GAAcI,EAAaP,GAC3BO,EAAaP,EAAI,GAAK,EACtBW,KAIJJ,EAAeC,EAAUD,GAEpB,IAAA,IAAIP,EAAI,EAAGA,EAAIM,EAAIG,OAAQT,IAC9BM,EAAIN,GAAKO,EAAaP,IAAM,EAIhC,SAASY,EAAoBC,EAAMC,GACzBD,OAAAA,GACDR,KAAAA,EACAU,KAAAA,EACGC,IADR,EACQA,EAAiBC,EAAUH,GAEfA,EAAAA,EAAAA,GAHpB,IAGyB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CACrBD,EADqB,EAAA,QAHzB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAOOK,EAAeF,EAAgBC,EAAUH,MAC5CK,EAAYL,GACZb,EAAWa,GACXZ,EAAYd,EAAgB0B,KAMpC,SAASM,EAAkBP,EAAMC,GACvBD,OAAAA,GACDR,KAAAA,EACAU,KAAAA,EAIE,IAHCM,IAAAA,EAAeC,EAAYR,GAC3BS,EAAmBN,EAAUI,GAE1BrB,EAAI,EAAGA,EAAIqB,EAAaZ,OAAQT,IACvCa,EAAKQ,EAAarB,IAGhB,IAACkB,EACHK,EAAkBN,EAAUI,IAAgB,CAC5CF,EAAYL,GACZb,EAAWoB,GAIN,IAFCG,IAAAA,EAAYC,EAAgBJ,GAEzBrB,EAAI,EAAGA,EAAIwB,EAAUf,OAAQT,IAC/B,IAAA,IAAI0B,EAAI,EAAGA,EAAIF,EAAUxB,GAAGS,OAAQiB,IACvCZ,EAAId,GAAG0B,GAAKF,EAAUxB,GAAG0B,GAI7BxB,EAAYd,EAAgBoC,KAMpC,SAAST,EAAUT,GACjBD,EAASC,EAAIqB,WACbrB,EAAIqB,UAGN,SAAS1B,EAAWa,GACZc,IAAAA,EAAad,EAChBe,IAAI,SAACvB,EAAKwB,GAAaxB,OAAAA,EAAIuB,IAC1B,SAACE,EAAKC,GAAaD,OAAQ,IAARA,EAAY,CAACD,EAAUE,GAAY,SACvDC,OACAC,OAAO,SAAAC,GAASA,OAAU,OAAVA,IAEfP,GAAAA,EAAWnB,OAAS,EAAG,CACnB2B,IACuBA,EAAAA,EADXR,EAAWS,KAAKC,MAAMD,KAAKE,SAAWX,EAAWnB,SAD1C,GAElBqB,EAFkB,EAAA,GAERE,EAFQ,EAAA,GAIzBlB,EAAIgB,GAAUE,GAAYK,KAAKE,UAAY,GAAM,EAAI,EACrDpB,EAAYL,GACZH,KAIJ,SAAST,EAAYsC,EAAW1B,GAG9B2B,EAAeD,EAFQvB,EAAUH,IAKnC,SAASH,IACPrB,EAAMM,YAAcO,EAEFZ,IAHG,EAGHA,EAAAA,EAAAA,GAHG,IAGS,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAnBe,IAAmB,EACTA,EAAAA,EADS,EAAA,OAAA,IACJ,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAClBI,GAAS,OADS,EAAA,MAKpB,OAHAvB,EAAWM,UAAUC,OAAO,eAC5BU,GAAW,IAJa,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,MAHT,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,KAevB,SAASe,EAAYL,GACd4B,KAAmBC,EAAa7B,KACnC5B,EAAYO,UAAUC,OAAO,UAC7BU,GAAW,GAIf,SAASuC,EAAa7B,GACFA,IADO,EACPA,EAAAA,EAAAA,GADO,IACF,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CACjBR,GADiB,EAAA,MACbsC,SAAS,GACR,OAAA,GAHc,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAOlB,OAAA,EAGT,SAASF,IACF,IAAA,IAAI1C,EAAI,EAAGA,EAAIT,EAAWkB,OAAQT,IAGhC,IAFCM,IAAAA,EAAMf,EAAWS,GAEd0B,EAAI,EAAGA,EAAIpB,EAAIG,OAAS,EAAGiB,IAC9BpB,GAAAA,EAAIoB,KAAOpB,EAAIoB,EAAI,GACd,OAAA,EAKR,IAAA,IAAI1B,EAAI,EAAGA,EAAIT,EAAWkB,OAAS,EAAGT,IACpC,IAAA,IAAI0B,EAAI,EAAGA,EAAInC,EAAWS,GAAGS,OAAQiB,IACpCnC,GAAAA,EAAWS,GAAG0B,KAAOnC,EAAWS,EAAI,GAAG0B,GAClC,OAAA,EAKN,OAAA,EAGT,SAASlB,EAAUF,GACVA,OAAAA,EAAI4B,OAAO,SAAAW,GAAQA,OAAS,IAATA,IAG5B,SAAS5B,EAAUH,GACVA,OAAAA,EAAImB,OAGb,SAASf,EAAe4B,EAAMC,GACrBD,OAAAA,EAAKrC,SAAWsC,EAAKtC,QAAUqC,EAAKE,MACzC,SAACC,EAAOd,GAAUc,OAAAA,IAAUF,EAAKZ,KAGrC,SAASpC,IACF,IAAA,IAAIC,EAAI,EAAGA,EAAIT,EAAWkB,OAAQT,IACrCT,EAAWS,GAAK,CAAC,EAAG,EAAG,EAAG,GAG5BI,GAAW,EAENlB,EAAYO,UAAUK,SAAS,WAClCZ,EAAYO,UAAUE,IAAI,UAGvBR,EAAWM,UAAUK,SAAS,WACjCX,EAAWM,UAAUE,IAAI,UAG3BQ,EAAa,EACbQ,IAGF,SAAS8B,EAAeS,EAAOpC,GACxB,IAAA,IAAId,EAAI,EAAGA,EAAIkD,EAAMzC,OAAQT,IACjB,IAAXc,EAAId,IACNkD,EAAMlD,GAAGJ,YAAc,GACvBsD,EAAMlD,GAAGP,UAAY,eAErByD,EAAMlD,GAAGJ,YAAckB,EAAId,GAC3BkD,EAAMlD,GAAGP,UAAsCqB,0BAAAA,OAAAA,EAAId,KAKzD,SAASsB,EAAYR,GAGd,IAFCqC,IAAAA,EAAU,GAEPnD,EAAI,EAAGA,EAAIc,EAAIL,OAAQT,IAAK,CAG9B,IAFCM,IAAAA,EAAM,GAEHoB,EAAIZ,EAAIL,OAAS,EAAGiB,GAAK,EAAGA,IACnCpB,EAAI8C,KAAKtC,EAAIY,GAAG1B,IAElBmD,EAAQC,KAAK9C,GAGR6C,OAAAA,EAGT,SAAS1B,EAAgBX,GAGlB,IAFCqC,IAAAA,EAAU,GAEPnD,EAAIc,EAAIL,OAAS,EAAGT,GAAK,EAAGA,IAAK,CAGnC,IAFCM,IAAAA,EAAM,GAEHoB,EAAI,EAAGA,EAAIZ,EAAId,GAAGS,OAAQiB,IACjCpB,EAAI8C,KAAKtC,EAAIY,GAAG1B,IAElBmD,EAAQC,KAAK9C,GAGR6C,OAAAA,EA7PTpE,SAASc,iBAAiB,QAAS,SAACwD,GAC9BjD,IAAAA,EAAAA,CAIIiD,OAAAA,EAAEC,KACH,IAAA,YACH1C,EAAoBP,EAAUd,GAC9BoB,IACA,MAEG,IAAA,aACHC,EAAoBG,EAAWxB,GAC/BoB,IACA,MAEG,IAAA,UACHS,EAAkBL,EAAWxB,GAC7BoB,IACA,MAEG,IAAA,YACHS,EAAkBf,EAAUd,GAC5BoB,IAGJQ,EAAY5B","file":"main.60a0eb94.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst countOfNewCellsWhenStart = 2;\n\nconst start = document.querySelector('.start');\n\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nconst gameFieldCells = document.querySelectorAll('.field-cell');\nconst score = document.querySelector('.game-score');\n\nconst fieldArray = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstart.addEventListener('click', () => {\n  if (start.classList.contains('start')) {\n    startGame();\n  }\n  restart();\n\n  for (let i = 0; i < countOfNewCellsWhenStart; i++) {\n    addNewCell(fieldArray);\n    updateCells(gameFieldCells, fieldArray);\n  }\n});\n\nfunction startGame() {\n  start.classList.remove('start');\n  start.classList.add('restart');\n  start.textContent = 'Restart';\n  startMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n}\n\nlet scoreValue = 0;\nlet gameOver = false;\n\ndocument.addEventListener('keyup', (e) => {\n  if (gameOver) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      canMoveHorizontally(moveLeft, fieldArray);\n      updateScore();\n      break;\n\n    case 'ArrowRight':\n      canMoveHorizontally(moveRight, fieldArray);\n      updateScore();\n      break;\n\n    case 'ArrowUp':\n      canMoveVertically(moveRight, fieldArray);\n      updateScore();\n      break;\n\n    case 'ArrowDown':\n      canMoveVertically(moveLeft, fieldArray);\n      updateScore();\n  }\n\n  checkIfLose(fieldArray);\n});\n\nfunction moveLeft(row) {\n  let nonZeroCells = filterRow(row);\n\n  for (let i = 0; i < nonZeroCells.length; i++) {\n    const cell = nonZeroCells[i];\n    const nextCell = nonZeroCells[i + 1];\n\n    if (cell === nextCell) {\n      nonZeroCells[i] = cell * 2;\n      scoreValue += nonZeroCells[i];\n      nonZeroCells[i + 1] = 0;\n      updateScore();\n    }\n  }\n\n  nonZeroCells = filterRow(nonZeroCells);\n\n  for (let i = 0; i < row.length; i++) {\n    row[i] = nonZeroCells[i] || 0;\n  }\n}\n\nfunction canMoveHorizontally(move, arr) {\n  switch (move) {\n    case moveLeft:\n    case moveRight:\n      const copyFieldArray = flatArray(arr);\n\n      for (const row of arr) {\n        move(row);\n      }\n\n      if (!areArraysEqual(copyFieldArray, flatArray(arr))) {\n        checkIfLose(arr);\n        addNewCell(arr);\n        updateCells(gameFieldCells, arr);\n      }\n      break;\n  }\n}\n\nfunction canMoveVertically(move, arr) {\n  switch (move) {\n    case moveLeft:\n    case moveRight:\n      const arrayRotated = rotateArray(arr);\n      const arrayRotatedFlat = flatArray(arrayRotated);\n\n      for (let i = 0; i < arrayRotated.length; i++) {\n        move(arrayRotated[i]);\n      }\n\n      if (!areArraysEqual(\n        arrayRotatedFlat, flatArray(arrayRotated))) {\n        checkIfLose(arr);\n        addNewCell(arrayRotated);\n\n        const arrayBack = rotateArrayBack(arrayRotated);\n\n        for (let i = 0; i < arrayBack.length; i++) {\n          for (let j = 0; j < arrayBack[i].length; j++) {\n            arr[i][j] = arrayBack[i][j];\n          }\n        }\n\n        updateCells(gameFieldCells, arrayBack);\n      }\n      break;\n  }\n}\n\nfunction moveRight(row) {\n  moveLeft(row.reverse());\n  row.reverse();\n}\n\nfunction addNewCell(arr) {\n  const emptyIndxs = arr\n    .map((row, rowIndex) => row.map(\n      (col, colIndex) => col === 0 ? [rowIndex, colIndex] : null))\n    .flat()\n    .filter(index => index !== null);\n\n  if (emptyIndxs.length > 0) {\n    const randIndex = emptyIndxs[Math.floor(Math.random() * emptyIndxs.length)];\n    const [rowIndex, colIndex] = randIndex;\n\n    arr[rowIndex][colIndex] = Math.random() <= 0.9 ? 2 : 4;\n    checkIfLose(arr);\n    updateScore();\n  }\n}\n\nfunction updateCells(gameCells, arr) {\n  const flatFieldArray = flatArray(arr);\n\n  setValueToCell(gameCells, flatFieldArray);\n}\n\nfunction updateScore() {\n  score.textContent = scoreValue;\n\n  for (const row of fieldArray) {\n    for (const cell of row) {\n      if (cell === 2048) {\n        winMessage.classList.remove('hidden');\n        gameOver = true;\n\n        return;\n      }\n    }\n  }\n}\n\nfunction checkIfLose(arr) {\n  if (!canMergeCell() && !hasEmptyCell(arr)) {\n    loseMessage.classList.remove('hidden');\n    gameOver = true;\n  }\n}\n\nfunction hasEmptyCell(arr) {\n  for (const row of arr) {\n    if (row.includes(0)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction canMergeCell() {\n  for (let i = 0; i < fieldArray.length; i++) {\n    const row = fieldArray[i];\n\n    for (let j = 0; j < row.length - 1; j++) {\n      if (row[j] === row[j + 1]) {\n        return true;\n      }\n    }\n  }\n\n  for (let i = 0; i < fieldArray.length - 1; i++) {\n    for (let j = 0; j < fieldArray[i].length; j++) {\n      if (fieldArray[i][j] === fieldArray[i + 1][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction filterRow(row) {\n  return row.filter(item => item !== 0);\n}\n\nfunction flatArray(arr) {\n  return arr.flat();\n}\n\nfunction areArraysEqual(arr1, arr2) {\n  return arr1.length === arr2.length && arr1.every(\n    (value, index) => value === arr2[index]);\n}\n\nfunction restart() {\n  for (let i = 0; i < fieldArray.length; i++) {\n    fieldArray[i] = [0, 0, 0, 0];\n  }\n\n  gameOver = false;\n\n  if (!loseMessage.classList.contains('hidden')) {\n    loseMessage.classList.add('hidden');\n  }\n\n  if (!winMessage.classList.contains('hidden')) {\n    winMessage.classList.add('hidden');\n  }\n\n  scoreValue = 0;\n  updateScore();\n}\n\nfunction setValueToCell(cells, arr) {\n  for (let i = 0; i < cells.length; i++) {\n    if (arr[i] === 0) {\n      cells[i].textContent = '';\n      cells[i].classList = 'field-cell';\n    } else {\n      cells[i].textContent = arr[i];\n      cells[i].classList = `field-cell field-cell--${arr[i]}`;\n    }\n  }\n}\n\nfunction rotateArray(arr) {\n  const newRows = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const row = [];\n\n    for (let j = arr.length - 1; j >= 0; j--) {\n      row.push(arr[j][i]);\n    }\n    newRows.push(row);\n  }\n\n  return newRows;\n}\n\nfunction rotateArrayBack(arr) {\n  const newRows = [];\n\n  for (let i = arr.length - 1; i >= 0; i--) {\n    const row = [];\n\n    for (let j = 0; j < arr[i].length; j++) {\n      row.push(arr[j][i]);\n    }\n    newRows.push(row);\n  }\n\n  return newRows;\n}\n"]}